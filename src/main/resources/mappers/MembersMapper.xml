<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MembersMapper">

    <!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
    <resultMap id="membersMapper" type="study.spring.springhelper.model.Members">
        
        <result property="member_id" column="member_id" />
        <result property="user_id" column="user_id" />
        <result property="name" column="name" />
        <result property="nick" column="nick" />
        <result property="tel" column="tel" />
        <result property="email" column="email" />
        <result property="email_code" column="email_code" />
        <result property="user_pw" column="user_pw" />
        <result property="grade" column="grade" />
<!--         <result property="member_imgJson" column="member_img" /> -->
        <result property="member_type" column="member_type" />
        <result property="created_at" column="create_at" />
        <result property="updated_at" column="updated_at" />
        <result property="deleted_at" column="deleted_at" />
        <result property="si_name" column="si_name" />
        <result property="gu_name" column="gu_name" />
        <result property="dong_name" column="dong_name" />
        <result property="keyword_name" column="keyword_name" />
        <result property="dong_dong_id" column="dong_dong_id" />        
        <result property="thumbnailPath" column="thumbnailPath" />
    </resultMap>
    
    <!--마이페이지 닉네임&이미지, 판매자프로필 닉네임&이미지-->
	<select id="selectgoods" parameterType="study.spring.springhelper.model.Members" resultMap="membersMapper">
		SELECT  a.member_id,
	            a.user_id,
	            a.name,
	            a.nick,
	            a.email,
	            a.member_type,
	            a.updated_at,
	            a.dong_dong_id,
	            IFNULL(b.thumbnailPath, '/profile-img.png') as thumbnailPath
          FROM  member a
				left outer join file b on b.upload_type = 'member'
									  and b.upload_id = a.member_id
									  and b.file_seq = 1
         WHERE  a.member_id = #{member_id}
	</select>
	
    <!--로그인 회원 조회-->
	<select id="selectmember" parameterType="study.spring.springhelper.model.Members" resultMap="membersMapper">
		SELECT
		        user_id,
	            name,
	            nick,
	            email,
	            member_img,
	            member_type,
	            updated_at,
	            dong_dong_id
            FROM member
            WHERE goods_id = #{goods_id} 
            AND member_id=#{member_id}
	</select>
	
    <!-- 데이터 단일 조회 기능 정의 -->
    <select id="selectItem" parameterType="study.spring.springhelper.model.Members" resultMap="membersMapper">
        
        SELECT
            member_id,
            user_id,
            name,
            nick,
            tel,
            email,
            user_pw,
            grade,
            member_img,
            member_type,
            created_at,
            updated_at,
            deleted_at,
            dong_dong_id
            FROM member
            WHERE member_id=#{member_id}
        
    </select>
    
    
    
    <!-- 데이터 삭제 기능 정의 -->
    <delete id="deleteItem" parameterType="study.spring.springhelper.model.Members">
    
        <!-- 데이터를 delete 하지 않고 deleted_at 날짜를 수정해서 탈퇴회원 구분 
                기본으로 "9999-12-31"로 되어있다. -->
        UPDATE member SET
        deleted_at=now()
        WHERE member_id=#{member_id}
    
    </delete>
    
    
    
    <!-- 데이터 저장 기능 정의 -->
    <insert id="insertItem" parameterType="study.spring.springhelper.model.Members"
    useGeneratedKeys="true" keyProperty="member_id">
    
            INSERT INTO member (
            user_id,
            name,
            nick,
            tel,
            email,
            email_code,
            user_pw,
            grade,
            member_type,
            created_at,
            updated_at,
            deleted_at,
            dong_dong_id)
            
            VALUES (#{user_id}, #{name}, #{nick}, #{tel}, #{email}, 1, MD5(#{user_pw}),"등급1",
            "회원", now(), now(), "9999-12-31", 
            (select dong_id from dong where dong_name = #{dong_name})
            )


    </insert>
    
    
    <!-- 로그인 조회 -->
    <select id="loginItem" parameterType="study.spring.springhelper.model.Members" resultMap="membersMapper">
        SELECT
            member_id,
            user_id, 
            name,
            nick, 
            tel,
            email, 
            user_pw,
            grade, 
            member_img, 
            member_type,
            member.created_at,
            member.updated_at, 
            member.deleted_at,
            dong_dong_id,
            dong_name
        FROM member
        INNER JOIN dong ON member.dong_dong_id = dong.dong_id
        WHERE user_id=#{user_id} AND user_pw=MD5(#{user_pw}) AND member.deleted_at= "9999-12-31"
    </select>
    
    
    
    
    <!-- 데이터 수정 기능 정의 -->
    <update id="updateItem" parameterType="study.spring.springhelper.model.Members">
    
        UPDATE member SET
            nick=#{nick},
            tel=#{tel},
            email=#{email},
            user_pw=MD5(#{user_pw}),
            updated_at=now(),
            dong_dong_id=(select dong_id from dong where dong_name = #{dong_name})
            <!-- dong_dong_id=#{dong_dong_id} -->

        WHERE member_id=#{member_id}
    
    </update>
    
    
    
    
    <!-- 아이디 찾기 -->
    <select id="findId" parameterType="study.spring.springhelper.model.Members" resultMap="membersMapper">
        
        SELECT user_id 
        FROM member
        WHERE name=#{name} AND email=#{email}
    
    </select>
    
    
    
    <!-- 비밀번호 찾기 -->
    <select id="findPw" parameterType="study.spring.springhelper.model.Members">
    
        SELECT user_pw
        FROM member
        WHERE name=#{name} AND email=#{email} AND user_id=#{user_id}
    
    </select>
    
    
    
    
    <!-- 아이디 중복검사 -->
     <select id="idCheck" parameterType="study.spring.springhelper.model.Members" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE user_id=#{user_id}
    </select>
    <!-- 닉네임 중복검사 -->
     <select id="nickCheck" parameterType="study.spring.springhelper.model.Members" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE nick=#{nick}
    </select>
    <!-- 이메일 중복검사 -->
     <select id="emailCheck" parameterType="study.spring.springhelper.model.Members" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE email=#{email}
    </select>


</mapper>
