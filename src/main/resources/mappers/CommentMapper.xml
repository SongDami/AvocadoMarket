<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CommentMapper">

	<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
	<resultMap id="commentMap"
		type="study.spring.springhelper.model.Comment">
		<result property="goods_comment_id" column="goods_comment_id" />
		<result property="goods_c_content" column="goods_c_content" />
		<result property="created_at" column="created_at" />
		<result property="updated_at" column="updated_at" />
		<result property="deleted_at" column="deleted_at" />
		<result property="goods_id" column="goods_id" />
		<result property="member_id" column="member_id" />
		<result property="nick" column="nick" />
		<result property="editYn" column="editYn" />
	</resultMap>

	<!-- 상품에 등록된 댓글 전체 조회(페이징 범위) -->
	<select id="selectList"
		parameterType="study.spring.springhelper.model.Comment"
		resultMap="commentMap">
		SELECT  p.goods_comment_id,
				p.goods_c_content,
				DATE_FORMAT(p.created_at, '%m-%d') AS created_at,
				DATE_FORMAT(p.updated_at, '%H:%i') AS updated_at,
				p.deleted_at,
				p.goods_id, 
				p.member_id,
				e.nick,
				case when p.member_id = #{member_id} then 'Y' else 'N' end as editYn
		  FROM  goods_comment p
				INNER JOIN goods d ON p.goods_id = d.goods_id
				INNER JOIN member e on e.member_id = p.member_id
		 WHERE  p.goods_id = #{goods_id}
		   and  p.member_id not in (
				select  k.member_id_to
				  from  black k
				 where  k.black_type = '차단'
				   and  member_id_from = #{member_id}
				)
		 ORDER  BY p.updated_at DESC
		 LIMIT  #{limitCnt}
	</select>

    <!-- 데이터 수 조회를 위한 기능 정의 -->
    <!--뎃글수 -->
    <select id="selectCountAll"
        parameterType="study.spring.springhelper.model.Comment" resultType="int">
        SELECT  COUNT(*)
          FROM  goods_comment p
         WHERE  p.goods_id = #{goods_id}
		   and  p.member_id not in (
				select  k.member_id_to
				  from  black k
				 where  k.black_type = '차단'
				   and  member_id_from = #{member_id}
				)
    </select>

    <!-- 데이터 저장을 위한 기능 정의 -->
    <!--멤버아이디 멤버테이블 조인-->
    <insert id="insertItem"
        parameterType="study.spring.springhelper.model.Comment"
        useGeneratedKeys="true" keyProperty="goods_comment_id">
        INSERT INTO goods_comment (
	        goods_c_content, 
	        created_at, 
	        updated_at, 
	        deleted_at,
	        goods_id, 
	        member_id
        ) VALUES (
            #{goods_c_content},
            now(),
            now(),
            '99991231',
            #{goods_id},
            #{member_id}
        )
    </insert>

    <!-- 데이터 삭제를 위한 기능 정의 -->
    <delete id="deleteItem"
        parameterType="study.spring.springhelper.model.Comment">
        DELETE  FROM goods_comment
		 WHERE  goods_comment_id=#{goods_comment_id}
           AND  member_id = #{member_id}
    </delete>

    <!-- 데이터 갱신을 위한 기능 정의 -->
    <update id="updateItem"
        parameterType="study.spring.springhelper.model.Comment">
        UPDATE  goods_comment
           SET  goods_c_content = #{goods_c_content}
               ,updated_at = now()
         WHERE  goods_comment_id = #{goods_comment_id}
           AND  member_id = #{member_id}
    </update>

</mapper>
